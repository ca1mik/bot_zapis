# src/main.py
import os
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

import asyncio
import logging
from datetime import datetime, date, timedelta

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import BaseMiddleware
from contextlib import suppress

from src.config import cfg
from src.states import BookingFSM
from src.parsing import parse_date_human, normalize_range, parse_hhmm
from src.sheets import sheets
from src import keyboards as kb
from src.calendar_kb import build_month_kb

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def _delete_silent(msg):
    try:
        await msg.delete()
    except Exception:
        pass

class AutoDeleteUserTextMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(event, Message) and event.chat.type == "private" and (event.text or "").strip():
            # –°–Ω–∞—á–∞–ª–∞ –¥–∞—ë–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å
            result = await handler(event, data)
            # –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with suppress(Exception):
                await event.delete()
            return result

        # –ï—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–µ –ª–∏—á–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
        return await handler(event, data)

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("qwesade.bot")

router = Router()

# –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª –∫–∞–∫ ¬´—è–∫–æ—Ä—å¬ª –¥–ª—è reply-–∫–ª–∞–≤—ã
ANCHOR_TEXT = "\u2063"

# --- Webhook config (–¥–ª—è Render) ---
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "change_me")  # –ø–æ—Å—Ç–∞–≤—å —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ ENV
# Render —Å–∞–º –¥–∞—ë—Ç –≤–Ω–µ—à–Ω–∏–π URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π RENDER_EXTERNAL_URL ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –±–∞–∑—É
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE") or os.getenv("RENDER_EXTERNAL_URL", "")
WEBHOOK_URL = f"{WEBHOOK_BASE}{WEBHOOK_PATH}" if WEBHOOK_BASE else ""


# ---------- Reply-–∫–ª–∞–≤–∞ —Å–Ω–∏–∑—É ----------

def _reply_markup(mode: str) -> ReplyKeyboardMarkup:
    if mode == "menu":
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")]],
            resize_keyboard=True
        )
    # mode == flow
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

async def _delete_msg_by_id(bot, chat_id: int, msg_id: int | None):
    if not msg_id:
        return
    try:
        await bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

async def _set_reply_mode(bot: Bot, chat_id: int, state: FSMContext, mode: str):
    data = await state.get_data()
    if data.get("reply_mode") == mode and data.get("reply_msg_id"):
        return
    # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —è–∫–æ—Ä—å
    if data.get("reply_msg_id"):
        try:
            await bot.delete_message(chat_id, data["reply_msg_id"])
        except Exception:
            pass
    m = await bot.send_message(chat_id, ANCHOR_TEXT, reply_markup=_reply_markup(mode))
    await state.update_data(reply_msg_id=m.message_id, reply_mode=mode)


async def send_step(bot: Bot, chat_id: int, state: FSMContext, text: str, inline_markup=None, reply_mode: str = "flow"):
    if not (text or "").strip():
        text = "."
    await _set_reply_mode(bot, chat_id, state, reply_mode)

    data = await state.get_data()
    old_id = data.get("step_msg_id")
    if old_id:
        try:
            await bot.delete_message(chat_id, old_id)
        except Exception:
            pass

    m = await bot.send_message(chat_id, text, reply_markup=inline_markup)
    await state.update_data(step_msg_id=m.message_id)


async def goto_menu(bot: Bot, chat_id: int, state: FSMContext, title: str | None = None):
    await state.set_state()
    await send_step(bot, chat_id, state, title or "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", kb.kb_main_menu().as_markup(), reply_mode="menu")


async def goto_flow(bot: Bot, chat_id: int, state: FSMContext):
    await state.set_state(BookingFSM.choosing_service)
    await send_step(bot, chat_id, state, "–ß—Ç–æ —Ö–æ—á–µ—Ç—Å—è?", kb.kb_services().as_markup(), reply_mode="flow")

def admin_kb(row: dict) -> InlineKeyboardMarkup:
    req_id = row["RequestID"]
    uid = row["TelegramID"]
    username = (row.get("Username") or "").strip()
    contact_url = f"https://t.me/{username}" if username else f"tg://user?id={uid}"

    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"adm:ok:{req_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"adm:no:{req_id}")],
        [InlineKeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è", url=contact_url)],
    ])

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

# /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞)
# /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞)
@router.message(F.text.regexp(r"^/start(\s|$)"))
async def cmd_start(message: Message, state: FSMContext):
    try: await message.delete()
    except: pass
    await goto_menu(message.bot, message.chat.id, state, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∑–∞–ø–∏—Å—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ @qwesade.")

# –∫–Ω–æ–ø–∫–∞ —Ä–µ–ø–ª–∞–π "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" ‚Äî —Å—Ä–∞–∑—É –≤ –ø–æ—Ç–æ–∫ (–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(F.text == "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def msg_new(message: Message, state: FSMContext):
    try:
        await message.delete()
    except Exception:
        pass
    await goto_flow(message.bot, message.chat.id, state)



@router.message(F.text == "/new")
@router.callback_query(F.data == "new")
async def cmd_new(evt, state: FSMContext):
    bot = evt.bot
    chat_id = evt.message.chat.id if isinstance(evt, CallbackQuery) else evt.chat.id
    await goto_flow(bot, chat_id, state)


@router.message(F.text == "/help")
async def cmd_help(message: Message):
    try: await message.delete()
    except: pass
    await message.answer("/start ‚Äî –º–µ–Ω—é\n/new ‚Äî –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n/avail ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å\n/mine ‚Äî –º–æ–∏ –∑–∞—è–≤–∫–∏\n/agenda ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ")

@router.message(F.text == "/new")
async def cmd_new_msg(message: Message, state: FSMContext):
    try: await message.delete()
    except: pass
    await goto_flow(message.bot, message.chat.id, state)

# ---------- –ò–Ω—Ñ–æ-—Ä–∞–∑–¥–µ–ª—ã ----------

@router.callback_query(F.data == "mine")
async def cb_mine(cb: CallbackQuery, state: FSMContext):
    rows = sheets.user_recent(cb.from_user.id, limit=5)
    if not rows:
        return await cb.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç", show_alert=True)
    text = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n" + "\n\n".join(
        f"‚Ä¢ {r['RequestID']} ‚Äî {r['Service']} ‚Äî {r['DateText']} {r['TimeSlot']}\n"
        f"  –†–∞–π–æ–Ω: {r['District'] or '‚Äî'}\n"
        f"  –ü–æ–∂–µ–ª–∞–Ω–∏—è: {r['Wishes'] or '‚Äî'}\n"
        f"  –°—Ç–∞—Ç—É—Å: {r['Status'] or '–ù–æ–≤–∞—è'}"
        for r in rows
    )
    await send_step(cb.bot, cb.message.chat.id, state, text, kb.kb_main_menu().as_markup(), reply_mode="menu")
    await cb.answer()


@router.message(F.text == "/agenda")
async def cmd_agenda(message: Message):
    rows = sheets.ws_book.get_all_records()
    now = datetime.now()
    until = now + timedelta(days=60)

    def parse_dt(r):
        iso = r.get("DateISO", "")
        slot = str(r.get("TimeSlot", ""))
        try:
            dt = datetime.fromisoformat(iso)
        except Exception:
            return None
        import re
        m = re.search(r"(\d{1,2}):(\d{2})", slot)
        if m:
            dt = dt.replace(hour=int(m.group(1)), minute=int(m.group(2)))
        return dt

    items = []
    for r in rows:
        if r.get("Status") != "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞":
            continue
        dt = parse_dt(r)
        if not dt or dt < now or dt > until:
            continue
        items.append((dt, r))
    items.sort(key=lambda x: x[0])

    if not items:
        return await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
    lines = ["–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n"]
    for dt, r in items[:20]:
        lines.append(f"{dt:%d.%m %H:%M} ‚Äî {r.get('Service')} (@{r.get('Username') or r.get('TelegramID')})")
    await message.answer("\n".join(lines))


# ---------- –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏ ----------

@router.callback_query(BookingFSM.choosing_service, F.data.startswith("svc:"))
async def on_service(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    service = cb.data.split(":", 1)[1]
    await state.update_data(service=service)
    await state.set_state(BookingFSM.choosing_date)
    await send_step(cb.bot, cb.message.chat.id, state, "–ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ?", kb.kb_dates().as_markup())


# –ö–∞–ª–µ–Ω–¥–∞—Ä—å (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
@router.callback_query(BookingFSM.choosing_date, F.data.startswith("cal:nav:"))
async def cal_nav(cb: CallbackQuery):
    await cb.answer()
    y, m = map(int, cb.data.split(":")[2].split("-"))
    await cb.message.edit_reply_markup(reply_markup=build_month_kb(y, m).as_markup())


@router.callback_query(BookingFSM.choosing_date, F.data.startswith("cal:pick:"))
async def cal_pick(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    iso = cb.data.split(":")[2]
    await state.update_data(date_iso=iso, date_text=iso)
    await state.set_state(BookingFSM.choosing_time)
    await send_step(cb.bot, cb.message.chat.id, state, "–í–æ —Å–∫–æ–ª—å–∫–æ?", kb.kb_times().as_markup())


@router.callback_query(BookingFSM.choosing_date, F.data.startswith("date:"))
async def on_date_preset(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    val = cb.data.split(":", 1)[1]
    if val == "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
        today = date.today()
        return await cb.message.edit_reply_markup(reply_markup=build_month_kb(today.year, today.month).as_markup())
    iso = parse_date_human(val)
    await state.update_data(date_iso=iso, date_text=val)
    await state.set_state(BookingFSM.choosing_time)
    await send_step(cb.bot, cb.message.chat.id, state, "–í–æ —Å–∫–æ–ª—å–∫–æ?", kb.kb_times().as_markup())


# –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(BookingFSM.choosing_time, F.data.startswith("time:"))
async def on_time_button(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    val = cb.data.split(":", 1)[1]
    if val == "__interval__":
        await state.set_state(BookingFSM.getting_time_start)
        return await send_step(cb.bot, cb.message.chat.id, state,
                               "–ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>HH:MM‚ÄìHH:MM</b>\n–ù–∞–ø—Ä.: <code>11:23‚Äì14:45</code>")
    await state.update_data(time_slot=val)
    await state.set_state(BookingFSM.getting_district)
    await send_step(cb.bot, cb.message.chat.id, state, "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è? (–º–æ–∂–Ω–æ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')")


# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç–æ–º (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ ¬´–≤–µ—Å—å –¥–µ–Ω—å¬ª)
@router.message(BookingFSM.choosing_time)
async def on_time_text_one(message: Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt in {"‚¨Ö –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"}:
        if txt == "‚¨Ö –ù–∞–∑–∞–¥":
            return await on_back(message, state)
        else:
            return await on_cancel(message, state)
    await message.delete()

    low = txt.lower().replace("—ë", "–µ")
    if low in {"–≤–µ—Å—å –¥–µ–Ω—å", "–≤–µ—Å—å–¥–µ–Ω—å"}:
        await state.update_data(time_slot="–í–µ—Å—å –¥–µ–Ω—å")
        await state.set_state(BookingFSM.getting_district)
        return await send_step(message.bot, message.chat.id, state, "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è? (–º–æ–∂–Ω–æ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')")

    import re
    # –¥–æ–ø—É—Å–∫–∞–µ–º 11.23-19.45 –∏ —Ä–∞–∑–Ω—ã–µ —Ç–∏—Ä–µ
    norm = txt.replace("‚Äî", "-").replace("‚Äì", "-").replace(".", ":").replace(" ", "")
    if re.fullmatch(r"\d{1,2}:\d{2}-\d{1,2}:\d{2}", norm):
        a, b = norm.split("-")
        slot = f"{a}‚Äì{b}"
        await state.update_data(time_slot=slot)
        await state.set_state(BookingFSM.getting_district)
        return await send_step(message.bot, message.chat.id, state, "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è? (–º–æ–∂–Ω–æ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')")

    if parse_hhmm(txt):
        # –≤–≤–µ–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –∫–æ–Ω–µ—Ü (–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è getting_time_start)
        await state.update_data(_t_start=txt)
        await state.set_state(BookingFSM.getting_time_end)
        return await send_step(message.bot, message.chat.id, state, "–ö–æ–Ω–µ—Ü: <b>HH:MM</b>")

    await send_step(message.bot, message.chat.id, state,
                    "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>11:30‚Äì17:45</code> –∏–ª–∏ <b>–í–µ—Å—å –¥–µ–Ω—å</b>.")


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë–º –∏ –ø–æ ¬´–í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª¬ª
@router.message(BookingFSM.getting_time_start)
async def on_time_start(message: Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt in {"‚¨Ö –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"}:
        if txt == "‚¨Ö –ù–∞–∑–∞–¥":
            return await on_back(message, state)
        else:
            return await on_cancel(message, state)
    await message.delete()

    # —Å—Ä–∞–∑—É –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º
    import re
    norm = txt.replace("‚Äî", "-").replace("‚Äì", "-").replace(".", ":").replace(" ", "")
    if re.fullmatch(r"\d{1,2}:\d{2}-\d{1,2}:\d{2}", norm):
        a, b = norm.split("-")
        slot = f"{a}‚Äì{b}"
        await state.update_data(time_slot=slot)
        await state.set_state(BookingFSM.getting_district)
        return await send_step(message.bot, message.chat.id, state, "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è? (–º–æ–∂–Ω–æ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')")

    # –∏–Ω–∞—á–µ –∂–¥—ë–º –Ω–∞—á–∞–ª–æ –∫–∞–∫ HH:MM
    if not parse_hhmm(txt):
        return await send_step(message.bot, message.chat.id, state, "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: <code>11:30‚Äì17:45</code>")
    await state.update_data(_t_start=txt)
    await state.set_state(BookingFSM.getting_time_end)
    await send_step(message.bot, message.chat.id, state, "–ö–æ–Ω–µ—Ü: <b>HH:MM</b>")


@router.message(BookingFSM.getting_time_end)
async def on_time_end(message: Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt in {"‚¨Ö –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"}:
        if txt == "‚¨Ö –ù–∞–∑–∞–¥":
            return await on_back(message, state)
        else:
            return await on_cancel(message, state)
    await message.delete()
    data = await state.get_data()
    slot = normalize_range(data.get("_t_start", ""), txt)
    if not slot:
        return await send_step(message.bot, message.chat.id, state, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 11:30‚Äì17:45")
    await state.update_data(time_slot=slot)
    await state.set_state(BookingFSM.getting_district)
    await send_step(message.bot, message.chat.id, state, "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è? (–º–æ–∂–Ω–æ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')")


# –†–∞–π–æ–Ω
@router.message(BookingFSM.getting_district)
async def on_district(message: Message, state: FSMContext):
    txt = (message.text or "").strip()
    if txt in {"‚¨Ö –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"}:
        if txt == "‚¨Ö –ù–∞–∑–∞–¥":
            return await on_back(message, state)
        else:
            return await on_cancel(message, state)
    await message.delete()
    await state.update_data(district=txt)
    await state.set_state(BookingFSM.getting_wishes)
    await send_step(message.bot, message.chat.id, state, "–ü–æ–∂–µ–ª–∞–Ω–∏—è/–¥–µ—Ç–∞–ª–∏? (–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ—Ç')")


# –ü–æ–∂–µ–ª–∞–Ω–∏—è -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.message(BookingFSM.getting_wishes)
async def on_wishes(message: Message, state: FSMContext):
    wishes_text = (message.text or "").strip()
    await message.delete()
    if wishes_text.lower() in {"–Ω–µ—Ç", "-", "‚Äî"}:
        wishes_text = ""
    await state.update_data(wishes=wishes_text)
    data = await state.get_data()
    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å –∑–∞—è–≤–∫—É:\n\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {data.get('service')}\n"
        f"‚Ä¢ –ö–æ–≥–¥–∞: {data.get('date_text')}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {data.get('time_slot')}\n"
        f"‚Ä¢ –†–∞–π–æ–Ω: {data.get('district')}\n"
        f"‚Ä¢ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes_text or '‚Äî'}\n"
    )
    await state.set_state(BookingFSM.confirming)
    await send_step(message.bot, message.chat.id, state, text, kb.kb_confirm().as_markup())


@router.callback_query(BookingFSM.confirming, F.data == "edit")
async def on_edit(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–ó–∞–Ω–æ–≤–æ")
    await goto_flow(cb.bot, cb.message.chat.id, state)


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ admin_ids –∏ admin_chat_id)
async def _notify_admins(bot: Bot, text: str, markup: InlineKeyboardMarkup | None = None):
    admin_ids = list(getattr(cfg, "admin_ids", []) or [])
    if not admin_ids and getattr(cfg, "admin_chat_id", 0):
        admin_ids = [cfg.admin_chat_id]
    for aid in admin_ids:
        try:
            await bot.send_message(aid, text, reply_markup=markup)
        except Exception as e:
            log.warning("Admin notify failed (%s): %s", aid, e)


@router.callback_query(BookingFSM.confirming, F.data == "confirm")
async def on_confirm(cb: CallbackQuery, state: FSMContext, bot: Bot):
    await cb.answer()
    data = await state.get_data()
    date_iso = data.get("date_iso") or parse_date_human(data.get("date_text", "") or "")
    slot = data.get("time_slot", "")
    if not date_iso:
        await state.clear()
        return await goto_menu(bot, cb.message.chat.id, state, "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")

    if sheets.is_occupied(date_iso, slot):
        avail = sheets.get_availability(date_iso)
        free_list = [s for s, v in avail.items() if not (v or "").strip()]
        text = "–≠—Ç–æ—Ç —Å–ª–æ—Ç –∑–∞–Ω—è—Ç."
        if free_list:
            text += "\n–°–≤–æ–±–æ–¥–Ω–æ:\n" + "\n".join(f"‚Ä¢ {s}" for s in free_list)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        data = await state.get_data()
        await _delete_msg_by_id(cb.bot, cb.message.chat.id, data.get("step_msg_id"))
        await _delete_msg_by_id(cb.bot, cb.message.chat.id, data.get("reply_msg_id"))

        await state.clear()
        return await goto_menu(bot, cb.message.chat.id, state, text)

    req_id = f"RQ-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    row = {
        "Timestamp": datetime.now().isoformat(timespec="seconds"),
        "RequestID": req_id,
        "TelegramID": cb.from_user.id,
        "Username": cb.from_user.username or "",
        "Name": cb.from_user.full_name or "",
        "Service": data.get("service", ""),
        "DateISO": date_iso,
        "DateText": data.get("date_text", date_iso),
        "TimeSlot": slot,
        "District": data.get("district", ""),
        "Wishes": data.get("wishes", ""),
        "Status": "–ù–æ–≤–∞—è",
        "AdminComment": "",
    }

    try:
        sheets.append_booking(row)
        cell_text = f"{row['Service']} (@{row['Username'] or row['TelegramID']})\n{row['District'] or ''}".strip()
        ok = sheets.mark_slot(date_iso, slot, cell_text)
        if not ok:
            await state.clear()
            return await goto_menu(bot, cb.message.chat.id, state, "–û–π, —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.")
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        data = await state.get_data()
        await _delete_msg_by_id(cb.bot, cb.message.chat.id, data.get("step_msg_id"))
        await _delete_msg_by_id(cb.bot, cb.message.chat.id, data.get("reply_msg_id"))

        await state.clear()
        return await goto_menu(bot, cb.message.chat.id, state, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

    await send_step(bot, cb.message.chat.id, state, f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ\nID: {req_id}",
                    kb.kb_main_menu().as_markup(), reply_mode="menu")

    text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {req_id}\n"
        f"–û—Ç: @{cb.from_user.username or cb.from_user.id} ({cb.from_user.full_name})\n"
        f"–£—Å–ª—É–≥–∞: {row['Service']}\n–ö–æ–≥–¥–∞: {row['DateText']} {row['TimeSlot']}\n"
        f"–†–∞–π–æ–Ω: {row['District']}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {row['Wishes'] or '‚Äî'}\n"
        f"–î–∞—Ç–∞ISO: {row['DateISO']}"
    )
    await _notify_admins(bot, text, markup=admin_kb(row))
    await state.clear()


# ---------- Reply-–∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ ----------

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def on_cancel(message: Message, state: FSMContext):
    bot, chat_id = message.bot, message.chat.id

    # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–û—Ç–º–µ–Ω–∞")
    try:
        await message.delete()
    except Exception:
        pass

    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (—à–∞–≥ –∏ —è–∫–æ—Ä—å)
    data = await state.get_data()
    await _delete_msg_by_id(bot, chat_id, data.get("step_msg_id"))
    await _delete_msg_by_id(bot, chat_id, data.get("reply_msg_id"))

    # –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–π—Ç
    await state.clear()

    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç ‚Äî –ø–æ—Å—Ç–∞–≤—å title=None)
    await send_step(bot, chat_id, state, "–û—Ç–º–µ–Ω–µ–Ω–æ.", kb.kb_main_menu().as_markup(), reply_mode="menu")


@router.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def on_back(message: Message, state: FSMContext):
    # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–ù–∞–∑–∞–¥")
    try:
        await message.delete()
    except Exception:
        pass

    st = await state.get_state()
    bot, chat_id = message.bot, message.chat.id

    if st == BookingFSM.getting_wishes.state:
        await state.set_state(BookingFSM.getting_district)
        return await send_step(bot, chat_id, state, "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è? (–º–æ–∂–Ω–æ '–±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã')")

    if st == BookingFSM.getting_district.state:
        await state.set_state(BookingFSM.choosing_time)
        return await send_step(bot, chat_id, state, "–í–æ —Å–∫–æ–ª—å–∫–æ?", kb.kb_times().as_markup())

    if st in (BookingFSM.getting_time_end.state, BookingFSM.getting_time_start.state, BookingFSM.choosing_time.state):
        await state.set_state(BookingFSM.choosing_date)
        return await send_step(bot, chat_id, state, "–ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ?", kb.kb_dates().as_markup())

    if st in (BookingFSM.choosing_date.state, BookingFSM.choosing_service.state, BookingFSM.confirming.state):
        return await goto_flow(bot, chat_id, state)

    await goto_menu(bot, chat_id, state)


# ---------- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ----------

@router.message(F.text == "/avail")
@router.callback_query(F.data == "avail")
async def cmd_avail(evt, state: FSMContext):
    msg = evt.message if isinstance(evt, CallbackQuery) else evt
    await send_step(msg.bot, msg.chat.id, state, "–ö–æ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å?", kb.kb_dates(prefix="date:").as_markup(), reply_mode="menu")


@router.callback_query(F.data.startswith("adv_date:"))
async def on_avail_date(cb: CallbackQuery):
    await cb.answer()
    val = cb.data.split(":", 1)[1]
    if val == "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É":
        today = date.today()
        return await cb.message.edit_reply_markup(reply_markup=build_month_kb(today.year, today.month).as_markup())
    iso = parse_date_human(val)
    await _show_availability(cb.message, iso, val)


@router.message(F.text.regexp(r"\d{1,2}[./-]\d{1,2}([./-]\d{4})?"))
async def on_avail_date_text(message: Message):
    iso = parse_date_human(message.text)
    if not iso:
        return await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: 26.08.2025")
    await _show_availability(message, iso, message.text.strip())


async def _show_availability(dst_msg: Message, date_iso: str | None, label: str):
    if not date_iso:
        return await dst_msg.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É")
    avail = sheets.get_availability(date_iso)
    lines = [f"üìÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ {label} ({date_iso}):"]
    for s in cfg.time_slots:
        lines.append(f"‚Ä¢ {s} ‚Äî {'‚ùå –∑–∞–Ω—è—Ç–æ' if (avail.get(s, '') or '').strip() else '‚úÖ —Å–≤–æ–±–æ–¥–Ω–æ'}")
    await dst_msg.answer("\n".join(lines))

def _is_admin(user_id: int) -> bool:
    ids = set(getattr(cfg, "admin_ids", []) or [])
    if getattr(cfg, "admin_chat_id", 0):
        ids.add(cfg.admin_chat_id)
    return user_id in ids

@router.callback_query(F.data.startswith("adm:"))
async def on_admin_action(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    _, action, req_id = cb.data.split(":", 2)
    row = sheets.get_by_request_id(req_id)

    if not row:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    try:
        if action == "ok":
            sheets.set_status(req_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            try:
                await cb.bot.send_message(
                    row["TelegramID"],
                    f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ {req_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n"
                    f"{row['Service']} ‚Äî {row['DateText']} {row['TimeSlot']}"
                )
            except:
                pass

            await cb.message.edit_text(cb.message.text + "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", reply_markup=None)
            await cb.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

        elif action == "no":
            sheets.set_status(req_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            try:
                sheets.clear_slot(row["DateISO"], row["TimeSlot"])
            except:
                pass
            try:
                await cb.bot.send_message(
                    row["TelegramID"],
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞—è–≤–∫–∞ {req_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå.\n"
                    "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç."
                )
            except:
                pass

            await cb.message.edit_text(cb.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", reply_markup=None)
            await cb.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        else:
            await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

    except Exception as e:
        log.exception("Admin action failed: %s", e)
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

# ---------- Launcher ----------

# ---------- Launcher (polling + webhook) ----------

async def _build_dp_and_bot():
    bot = Bot(cfg.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.include_router(router)
    return dp, bot

async def main_polling():
    dp, bot = await _build_dp_and_bot()
    await dp.start_polling(bot)

def main_webhook():
    app = web.Application()

    # healthcheck
    app.router.add_get("/", lambda r: web.Response(text="ok"))  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä–Ω—è
    app.router.add_get("/ping", lambda r: web.Response(text="ok"))  # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ ¬´–ø–∏–Ω–≥¬ª
    # —Å–æ–±–µ—Ä—ë–º dp/bot –∑–∞—Ä–∞–Ω–µ–µ (–ù–ï –≤ on_startup)
    bot = Bot(cfg.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.include_router(router)

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å aiohttp
    SimpleRequestHandler(dp, bot, secret_token=WEBHOOK_SECRET).register(app, WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    async def on_startup(_):
        if not WEBHOOK_URL:
            raise RuntimeError("WEBHOOK_BASE/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω. –°–º. –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
        await bot.set_webhook(WEBHOOK_URL, secret_token=WEBHOOK_SECRET)

    async def on_shutdown(_):
        await bot.delete_webhook(drop_pending_updates=True)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", "10000")))


if __name__ == "__main__":
    mode = os.getenv("MODE", "webhook")  # webhook (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ polling
    if mode == "polling":
        asyncio.run(main_polling())
    else:
        main_webhook()

@router.message(F.text)
async def fallback_text(message: Message):
    # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º state ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    await message.answer("–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")